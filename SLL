#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

struct node
{
	int data;
	struct node *next;
	
} *head=NULL,*p,*t,*newnode;


void create()
{
	int n,i,ele;
	printf("no of elements in the elements:");
	scanf("%d",&n);
	
	for(i=0;i<n;i++)
	{
		printf("enter the element");
		scanf("%d",&ele);
		newnode=(struct node*)malloc(sizeof(struct node));
		newnode->data=ele;
		newnode->next=NULL;
		
		if(head==NULL)
		{
			head=newnode;
			p=head;
		}
		else
		{
			for(p=head;p->next!=NULL;p=p->next);
			
				p->next=newnode;
				p=newnode;
			
		}
	}
}

void display()
{
	if(head==NULL)  
	printf("the single linked list is empty");
	else
	{
		for(p=head;p!=NULL;p=p->next)
		printf("%d ->",p->data);
	}
}
void insert_at_begin()
{
	int ele;
	printf("enter the element:");
	scanf("%d",&ele);
	newnode=(struct node*)malloc(sizeof (struct node));
	newnode->data=ele;
	p=head;
	newnode->next=p;
	head=newnode;
	p=newnode;
}
void insert_at_end()
{
	int ele;
	printf("enter the element:");
	scanf("%d",&ele);
	newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=ele;
	newnode->next=NULL;
	for(p=head;p->next!=NULL;p=p->next);
	p->next=newnode;
	p=newnode;
}
void insert_at_anypos()
{
	int pos,ele,i;
	printf("enter the element:");
	scanf("%d %d",&ele,&pos);
	newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=ele;
	for(i=1,p=head;i<pos;i++,p=p->next)
	t=p;
	t->next=newnode;
	newnode->next=p;
	p=newnode;
}
void delete_at_begin()
{
	int ele;
	p=head;
	ele=p->data;
	head=p->next;
	free(p);
	p=head;
	printf("the deleted element is %d",ele);
}
void delete_at_end()
{
	int ele;
	for(p=head;p->next!=NULL;p=p->next)
	t=p;
	ele=p->data;
	t->next =NULL;
	free(p);
	p=t;
	printf("the delete elements=%d",ele);
}

void delete_at_anypos()
{
	int ele,i,pos;
	printf("enter the position is data");
	scanf("%d",&pos);
	for(i=1,p=head;i<pos;i++,p=p->next)
	t=p;
	ele=p->data;
	t->next=p->next;
	free(p);
	p=t;
	printf("the delete elemntes=%d",ele);
}

void even_odd_count()
{
   int even=0,odd=0,i;
	
	for(p=head;p!=NULL;p=p->next)
	{
		if (p->data%2==0)
			even++;
		else
			odd++;
		
	}
	printf("\n the even numbers = %d",even);
	printf("\n the odd numbers = %d",odd);
}
void print_alternate_element()
{
for(p=head;p!=NULL;p=p->next,p=p->next)
printf("%d->",p->data);
}
void search_element()
{
	int key,flag=0,postion,i;
	printf("enter the key");
	scanf("%d",& key);
	for(i=1,p=head;p!=NULL;i++,p=p->next)
	{
		if(p->data==key)
		{
			flag=1;
			postion=i;
			break;
			
		}
	}
	if(flag==1)
	printf("the elements is present in %d postion[i]",postion);
	else
	printf("the elements not in the list");
}
void print_reverse()
{
	int n,reverse=0,remainder,i;
	printf("enter the number");
	scanf("%d",& n);
	
    while(n!=0)
{
		remainder=n%10;
		reverse=reverse*10+remainder;
		n/=10;
		
	}
	printf("print the reversed numbers");
}


int main()
{
	int cho;
	do
	{
		printf("\nmain menu");
		printf("\n1.create\n2.display\n3.inser_at_begin\n4.insert_at_end\n5.insert_at_anypos\n6.delete_at_begin\n7.delete_at_end\n8.delete_at_anypos\n9.exit");
		printf("\nenter your choice");
		scanf("%d",&cho);
		switch(cho)
		{
			case 1: create();break;
			case 2: display();break;
			case 3: insert_at_begin();break;
			case 4: insert_at_end();break;
			case 5: insert_at_anypos();break;
			case 6: delete_at_begin();break;
			case 7: delete_at_end();break;
			case 8: delete_at_anypos();break;
			case 9: even_odd_count(); break;
			case 10: print_alternate_element(); break;
			case 11: search_element();break;
			case 12:  print_reverse();break;
			case 13: exit(0);
			
			default : printf("enter the choice between 1 to 9"); break;
		}
	}while(cho>=1&&cho<=10);
	return 0;
} 
